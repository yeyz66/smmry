'use client';

import { useState, useRef } from "react";
import { jsPDF } from "jspdf";
import Header from "@/components/layout/Header";
import Footer from "@/components/layout/Footer";
import { 
  Clipboard, 
  Upload, 
  Trash2, 
  Settings, 
  Wand2, 
  Copy, 
  Download, 
  Share, 
  RefreshCcw, 
  Save,
  FileText
} from "lucide-react";
import useSummarize, { SummaryLength, SummaryStyle } from "@/hooks/useSummarize";

export default function Home() {
  const [text, setText] = useState("");
  const [options, setOptions] = useState({
    length: 'short' as SummaryLength,
    style: 'concise' as SummaryStyle,
    complexity: 3,
  });
  const [showOptions, setShowOptions] = useState(false);
  const { summarize, reset, isLoading, error, result } = useSummarize();
  const [shareUrl, setShareUrl] = useState<string | null>(null);
  const [showShareModal, setShowShareModal] = useState(false);
  
  // Count characters
  const charCount = text.length;
  
  // Handle user actions
  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setText(e.target.value);
  };
  
  const handleClear = () => {
    setText("");
    reset();
  };
  
  const handlePaste = async () => {
    try {
      const clipboardText = await navigator.clipboard.readText();
      setText(clipboardText);
    } catch (err) {
      console.error("Failed to read clipboard:", err);
      // User may have denied clipboard permission
      alert("Unable to access clipboard. Please paste manually.");
    }
  };
  
  const handleSummarize = () => {
    summarize(text, options);
  };
  
  const handleCopy = async () => {
    if (!result?.summary) return;
    
    try {
      await navigator.clipboard.writeText(result.summary);
      alert("Summary copied to clipboard!");
    } catch (err) {
      console.error("Failed to copy:", err);
      alert("Unable to copy. Please select and copy manually.");
    }
  };
  
  const handleDownloadPDF = () => {
    if (!result?.summary) return;
    
    const doc = new jsPDF();
    
    // Add title
    doc.setFontSize(16);
    doc.text("SummryAI Summary", 20, 20);
    
    // Add metadata
    doc.setFontSize(10);
    doc.text(`Original: ${result.metadata.originalWordCount} words`, 20, 30);
    doc.text(`Summary: ${result.metadata.summaryWordCount} words (${result.metadata.percentReduced}% reduction)`, 20, 35);
    
    // Add summary content
    doc.setFontSize(12);
    const textLines = doc.splitTextToSize(result.summary, 170);
    doc.text(textLines, 20, 45);
    
    // Add footer
    doc.setFontSize(8);
    doc.text("Generated by SummryAI - www.smmry.ai", 20, 280);
    
    // Save PDF
    doc.save("smmry-ai-summary.pdf");
  };
  
  const handleShare = async () => {
    // For a real implementation, this would create a shareable link
    // For now, we'll simulate it
    
    if (!result?.summary) return;
    
    // In a real implementation, this would make an API call to create a shareable link
    const mockShareId = Math.random().toString(36).substring(2, 12);
    const url = `${window.location.origin}/shared-summary?id=${mockShareId}`;
    
    setShareUrl(url);
    setShowShareModal(true);
  };
  
  // Options handlers
  const handleLengthChange = (length: SummaryLength) => {
    setOptions(prev => ({ ...prev, length }));
  };
  
  const handleStyleChange = (style: SummaryStyle) => {
    setOptions(prev => ({ ...prev, style }));
  };
  
  const handleComplexityChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const complexity = parseInt(e.target.value);
    setOptions(prev => ({ ...prev, complexity }));
  };
  
  return (
    <main>
      <Header />
      
      <div className="container mx-auto max-w-7xl px-4 py-8">
        <div className="bg-white rounded-xl shadow-sm overflow-hidden">
          <div className="flex justify-between items-center p-4 border-b border-gray-200">
            <div className="flex items-center text-xl font-bold text-blue-500">
              <FileText className="mr-2" />
              <span>SummryAI</span>
            </div>
          </div>
          
          <div className="grid md:grid-cols-2 min-h-[600px]">
            {/* Input Panel */}
            <div className="border-r border-gray-200">
              <div className="p-5">
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-lg font-semibold">Text to Summarize</h2>
                  <div className="flex gap-2">
                    <button 
                      className="p-2 bg-gray-100 rounded-md text-gray-600 hover:bg-gray-200 transition-colors" 
                      title="Paste from clipboard"
                      onClick={handlePaste}
                    >
                      <Clipboard className="w-5 h-5" />
                    </button>
                    <button 
                      className={`p-2 bg-gray-100 rounded-md text-gray-600 hover:bg-gray-200 transition-colors ${!text ? 'opacity-50 cursor-not-allowed' : ''}`} 
                      title="Clear text"
                      onClick={handleClear}
                      disabled={!text}
                    >
                      <Trash2 className="w-5 h-5" />
                    </button>
                  </div>
                </div>
                
                <textarea 
                  className="w-full h-[400px] p-4 border border-gray-200 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Paste or type the text you want to summarize..."
                  value={text}
                  onChange={handleTextChange}
                />
                
                <div className="mt-2 flex justify-between items-center">
                  <div className="text-sm text-gray-500">
                    {charCount} characters
                  </div>
                  
                  <div className="flex items-center gap-4">
                    <button 
                      className="flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
                      onClick={() => setShowOptions(!showOptions)}
                    >
                      <Settings className="w-4 h-4" />
                      <span className="text-sm">Summarization Options</span>
                    </button>
                    
                    <button 
                      className={`btn btn-primary flex items-center gap-2 ${isLoading ? 'opacity-70 cursor-not-allowed' : ''}`}
                      onClick={handleSummarize}
                      disabled={isLoading || text.trim().length < 10}
                    >
                      <span>{isLoading ? 'Summarizing...' : 'Summarize'}</span>
                      <Wand2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>
                
                {/* Options panel */}
                {showOptions && (
                  <div className="mt-4 p-4 bg-gray-50 rounded-lg">
                    <h3 className="font-medium mb-3">Customize your summary</h3>
                    
                    <div className="grid sm:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Length</label>
                        <div className="grid grid-cols-2 gap-2">
                          {(['very-short', 'short', 'medium', 'long'] as SummaryLength[]).map((length) => (
                            <button
                              key={length}
                              className={`px-3 py-1 text-sm rounded-md ${
                                options.length === length ? 'bg-blue-500 text-white' : 'bg-white border border-gray-200'
                              }`}
                              onClick={() => handleLengthChange(length)}
                            >
                              {length.replace('-', ' ')}
                            </button>
                          ))}
                        </div>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Style</label>
                        <div className="flex flex-wrap gap-2">
                          {(['concise', 'detailed', 'bullet-points', 'academic', 'simplified'] as SummaryStyle[]).map((style) => (
                            <button
                              key={style}
                              className={`px-3 py-1 text-sm rounded-md ${
                                options.style === style ? 'bg-blue-500 text-white' : 'bg-white border border-gray-200'
                              }`}
                              onClick={() => handleStyleChange(style)}
                            >
                              {style.replace('-', ' ')}
                            </button>
                          ))}
                        </div>
                      </div>
                    </div>
                    
                    <div className="mt-4">
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Complexity Level: {options.complexity}
                      </label>
                      <input 
                        type="range" 
                        min="1" 
                        max="5" 
                        value={options.complexity} 
                        onChange={handleComplexityChange}
                        className="w-full"
                      />
                      <div className="flex justify-between text-xs text-gray-500">
                        <span>Simpler</span>
                        <span>More Complex</span>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
            
            {/* Output Panel */}
            <div className="p-5">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-lg font-semibold">Summary Result</h2>
                <div className="flex gap-2">
                  <button 
                    className={`p-2 bg-gray-100 rounded-md text-gray-600 hover:bg-gray-200 transition-colors ${!result?.summary ? 'opacity-50 cursor-not-allowed' : ''}`} 
                    title="Copy"
                    onClick={handleCopy}
                    disabled={!result?.summary}
                  >
                    <Copy className="w-5 h-5" />
                  </button>
                  <button 
                    className={`p-2 bg-gray-100 rounded-md text-gray-600 hover:bg-gray-200 transition-colors ${!result?.summary ? 'opacity-50 cursor-not-allowed' : ''}`} 
                    title="Download as PDF"
                    onClick={handleDownloadPDF}
                    disabled={!result?.summary}
                  >
                    <Download className="w-5 h-5" />
                  </button>
                  <button 
                    className={`p-2 bg-gray-100 rounded-md text-gray-600 hover:bg-gray-200 transition-colors ${!result?.summary ? 'opacity-50 cursor-not-allowed' : ''}`} 
                    title="Share"
                    onClick={handleShare}
                    disabled={!result?.summary}
                  >
                    <Share className="w-5 h-5" />
                  </button>
                </div>
              </div>
              
              <div className="bg-gray-50 rounded-lg p-5 min-h-[400px]">
                {error ? (
                  <div className="text-red-500 p-4 bg-red-50 rounded-md">
                    {error}
                  </div>
                ) : isLoading ? (
                  <div className="flex items-center justify-center h-full">
                    <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
                  </div>
                ) : result?.summary ? (
                  <>
                    <div className="flex justify-between items-center mb-4">
                      <h3 className="font-semibold">Summary</h3>
                      <div className="flex gap-4 text-sm text-gray-500">
                        <div className="flex items-center gap-1">
                          <span>Original: {result.metadata.originalWordCount} words</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <span>Summary: {result.metadata.summaryWordCount} words ({result.metadata.percentReduced}% reduction)</span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="text-gray-700 leading-relaxed">
                      {result.metadata.style === 'bullet-points' ? (
                        <div dangerouslySetInnerHTML={{ __html: result.summary.replace(/\n/g, '<br />') }} />
                      ) : (
                        <p>{result.summary}</p>
                      )}
                    </div>
                    
                    <div className="flex justify-end gap-2 mt-6">
                      <button 
                        className="flex items-center gap-2 px-3 py-2 border border-gray-200 rounded-md bg-white hover:bg-gray-50 transition-colors"
                        onClick={() => summarize(text, options)}
                      >
                        <RefreshCcw className="w-4 h-4" />
                        <span className="text-sm">Regenerate</span>
                      </button>
                      <button className="flex items-center gap-2 px-3 py-2 border border-gray-200 rounded-md bg-white hover:bg-gray-50 transition-colors">
                        <Save className="w-4 h-4" />
                        <span className="text-sm">Save</span>
                      </button>
                    </div>
                  </>
                ) : (
                  <div className="flex flex-col items-center justify-center h-full text-center p-5">
                    <div className="text-gray-400 mb-4">
                      <FileText className="w-16 h-16 mx-auto" />
                    </div>
                    <h3 className="text-lg font-medium text-gray-600 mb-2">Your summary will appear here</h3>
                    <p className="text-gray-500 max-w-md">
                      Paste or type some text in the left panel and click "Summarize" to create a concise summary of your content.
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Share Modal */}
      {showShareModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg max-w-md w-full p-6">
            <h3 className="text-xl font-semibold mb-4">Share Summary</h3>
            <p className="text-gray-600 mb-4">Use this link to share your summary with others:</p>
            
            <div className="flex overflow-hidden border border-gray-200 rounded-md mb-4">
              <input
                type="text"
                value={shareUrl || ''}
                readOnly
                className="flex-grow p-2 text-sm focus:outline-none"
              />
              <button 
                className="bg-gray-100 text-gray-600 px-3 flex items-center hover:bg-gray-200 transition-colors"
                onClick={async () => {
                  if (shareUrl) {
                    await navigator.clipboard.writeText(shareUrl);
                    alert('Link copied to clipboard!');
                  }
                }}
              >
                <Copy className="w-4 h-4" />
              </button>
            </div>
            
            <div className="flex justify-end">
              <button 
                className="px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors"
                onClick={() => setShowShareModal(false)}
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}

      {/* User Operation Guide */}
      <div className="bg-gray-50 py-12">
        <div className="container mx-auto max-w-5xl px-4">
          <h2 className="text-2xl font-bold text-center mb-8">How to Use SummryAI</h2>
          
          <div className="grid md:grid-cols-3 gap-8">
            <div className="bg-white p-6 rounded-xl shadow-sm">
              <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mb-4">
                <span className="text-blue-600 font-bold text-xl">1</span>
              </div>
              <h3 className="text-lg font-semibold mb-2">Input Text</h3>
              <p className="text-gray-600">
                Paste your text content, upload a file, or manually enter the text you want to summarize. Supports various formats including .txt, .md, .doc, and .docx.
              </p>
            </div>
            
            <div className="bg-white p-6 rounded-xl shadow-sm">
              <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mb-4">
                <span className="text-blue-600 font-bold text-xl">2</span>
              </div>
              <h3 className="text-lg font-semibold mb-2">Customize Options</h3>
              <p className="text-gray-600">
                Choose the length, style, and complexity of your summary. Completely personalize your summary by clicking the "Summary Options" button to adjust to your specific needs.
              </p>
            </div>
            
            <div className="bg-white p-6 rounded-xl shadow-sm">
              <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mb-4">
                <span className="text-blue-600 font-bold text-xl">3</span>
              </div>
              <h3 className="text-lg font-semibold mb-2">Generate and Use</h3>
              <p className="text-gray-600">
                Click the "Summarize" button to start processing. After generation, you can copy the text, download as PDF format, or share the link with others. Not satisfied? Click "Regenerate" to get a new summary version.
              </p>
            </div>
          </div>
          
          <div className="mt-10 text-center">
            <h3 className="text-lg font-semibold mb-4">Advanced Features</h3>
            <div className="grid md:grid-cols-2 gap-6 max-w-3xl mx-auto">
              <div className="bg-white p-5 rounded-lg shadow-sm">
                <h4 className="font-medium mb-2">Batch Processing</h4>
                <p className="text-gray-600 text-sm">
                  Increase your productivity by batch processing multiple documents through our API integration.
                </p>
              </div>
              <div className="bg-white p-5 rounded-lg shadow-sm">
                <h4 className="font-medium mb-2">Multi-Language Support</h4>
                <p className="text-gray-600 text-sm">
                  SummryAI supports multiple languages and can automatically identify and process text content in different languages.
                </p>
              </div>
              <div className="bg-white p-5 rounded-lg shadow-sm">
                <h4 className="font-medium mb-2">Save History</h4>
                <p className="text-gray-600 text-sm">
                  After registering an account, you can save your summary history for easy access and re-editing previous work.
                </p>
              </div>
              <div className="bg-white p-5 rounded-lg shadow-sm">
                <h4 className="font-medium mb-2">Custom Theme</h4>
                <p className="text-gray-600 text-sm">
                  Advanced users can customize summary themes to focus on specific keywords and concepts in a particular field.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <Footer />
    </main>
  );
} 